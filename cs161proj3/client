#!/usr/bin/env python3

import getopt
import os
import select
import socket
import ssl
import struct
import sys

def usage(f=sys.stdout):
    f.write("""\
Usage: %s --tls-trustfile=FILENAME HOST PORT

  --disable-tls             run without TLS
  --socks-port=PORT         use the SOCKS proxy at 127.0.0.1:PORT
  --tls-trustfile=FILENAME  trust the root certificates in FILENAME
  --help                    show this help
""" % sys.argv[0])

class options(object):
    use_tls = True
    socks_port = None
    tls_trust_filename = None

# Return a socket connected to remote_address, which is a (hostname, port)
# tuple.
def connect(remote_address):
    s = socket.socket(socket.AF_INET)
    s.connect(remote_address)
    return s

# Return a socket connected to remote_address through the SOCKS4a proxy at
# socks_address.
def connect_with_socks(remote_address, socks_address):
    hostname, port = remote_address
    # TODO
    #First create a socket 
    port_num = remote_address[1]
    dom_name = bytearray(remote_address[0].encode())
    dom_name += struct.pack('x')
    usrID = bytearray(" ".encode())
    usrID += struct.pack('x')
    s = struct.pack('>bbhi', 4, 1, port_num, 1)
    sock = bytearray(s)
    sock+=(bytes(usrID))
    sock+=(bytes(dom_name))
    sock = bytes(sock)

    #send sock with client_socket 
    client_socket = socket.socket(socket.AF_INET)
    client_socket.connect(socks_address)
    client_socket.send(sock)

    server_response = client_socket.recvfrom(4096)

    server_response = struct.unpack('>8b', server_response[0])
    print(str(server_response))

    #read the response if successful return client_socket else raise socket.error
    #response_socket[1] should be 0x5a =90 if request granted
    if (server_response[1] == 90):
        return client_socket
    else:

        raise client_socket.error 

# Parse command line options.
opts, args = getopt.gnu_getopt(sys.argv[1:], "",
    ["disable-tls", "socks-port=", "tls-trustfile=", "help"])
for o, a in opts:
    if o == "--disable-tls":
        options.use_tls = False
    elif o == "--socks-port":
        options.socks_port = int(a)
    elif o == "--tls-trustfile":
        options.tls_trust_filename = a
    elif o == "--help":
        usage()
        sys.exit()
try:
    remote_hostname, remote_port = args
    remote_port = int(remote_port)
except ValueError:
    usage(sys.stderr)
    sys.exit(1)

print("connecting", file=sys.stderr)
try:
    if options.socks_port is not None:
        remote_socket = connect_with_socks((remote_hostname, remote_port), ("127.0.0.1", options.socks_port))
    else:
        remote_socket = connect((remote_hostname, remote_port))
except socket.error as e:
    print("cannot connect to %s port %d: %s" % (remote_hostname, remote_port, e), file=sys.stderr)
    sys.exit(1)
print("connected", file=sys.stderr)

if options.use_tls:
    # TODO
    # Wrap remote_socket in TLS and assign the resulting socket.SSLSocket back
    # to the remote_socket variable.
    raise NotImplementedError("TLS mode not implemented")

# Unbuffer stdin, change to binary mode.
sys.stdin = os.fdopen(sys.stdin.fileno(), "rb", 0)
# Change stdout to binary mode.
sys.stdout = os.fdopen(sys.stdout.fileno(), "wb")

sendbuf = []
while True:
    # select.select will notify us which file handles are ready to read.
    rset, _, _ = select.select([sys.stdin, remote_socket], [], [])
    for s in rset:
        if s == sys.stdin:
            c = s.read(1)
            if not c:
                sys.exit()
            # Buffer keyboard input until a newline.
            sendbuf.append(c)
            if c == b"\n":
                data = b"".join(sendbuf)
                remote_socket.sendall(data)
                sendbuf = []
        else:
            try:
                data = s.recv(1024)
            except (ssl.SSLWantReadError, ssl.SSLWantWriteError):
                continue
            except socket.error:
                data = None
            if not data:
                sys.exit()
            sys.stdout.write(data)
            sys.stdout.flush()
